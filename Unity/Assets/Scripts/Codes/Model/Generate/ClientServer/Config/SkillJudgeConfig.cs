//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET
{

public sealed partial class SkillJudgeConfig: Bright.Config.BeanBase
{
    public SkillJudgeConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        ColliderType = _buf.ReadInt();
        StartPosType = _buf.ReadInt();
        Time = _buf.ReadInt();
        ColliderShape = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ColliderPara = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); ColliderPara.Add(_e0);}}
        Speed = _buf.ReadFloat();
        PostInit();
    }

    public static SkillJudgeConfig DeserializeSkillJudgeConfig(ByteBuf _buf)
    {
        return new SkillJudgeConfig(_buf);
    }

    /// <summary>
    /// Id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 碰撞体类型类型(0固定位置碰撞体1固定朝向碰撞体2指定位置飞行碰撞体3朝向飞行碰撞体（锁定）4目标立刻结算)
    /// </summary>
    public int ColliderType { get; private set; }
    /// <summary>
    /// 起始位置（1自身，2目标，3鼠标位置）
    /// </summary>
    public int StartPosType { get; private set; }
    /// <summary>
    /// 碰撞体持续时间（单位:毫秒）
    /// </summary>
    public int Time { get; private set; }
    /// <summary>
    /// 碰撞体形状(0.立即判断;1.矩形;2.圆形；3.扇形)
    /// </summary>
    public int ColliderShape { get; private set; }
    /// <summary>
    /// 碰撞体形状参数(m)
    /// </summary>
    public System.Collections.Generic.List<float> ColliderPara { get; private set; }
    /// <summary>
    /// 速度（m/s）
    /// </summary>
    public float Speed { get; private set; }

    public const int __ID__ = -257219000;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ColliderType:" + ColliderType + ","
        + "StartPosType:" + StartPosType + ","
        + "Time:" + Time + ","
        + "ColliderShape:" + ColliderShape + ","
        + "ColliderPara:" + Bright.Common.StringUtil.CollectionToString(ColliderPara) + ","
        + "Speed:" + Speed + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}